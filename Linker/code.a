;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 21.12.2014
;Author  : MakZ
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Declare your global variables here
;
;void read_data(unsigned int * imass)
; 0000 001F {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0020 unsigned char mass[6];
; 0000 0021 char a;
; 0000 0022     // read accelerometer values
; 0000 0023     i2c_start();
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;	*imass -> Y+7
;	mass -> Y+1
;	a -> R17
;PCODE: $0000000F VOL: 0
; 0000 0024     i2c_write(0x30); // write acc
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0025     i2c_write(0xa8); // OUT_X_L_A, MSB set to enable auto-increment
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0026     i2c_start();     // repeated start
;PCODE: $00000014 VOL: 0
; 0000 0027     i2c_write(0x31); // read acc
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0028 
; 0000 0029     mass[0] = i2c_read();
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002A     mass[1] = i2c_read();
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B 	mass[2] = i2c_read();
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002C 	mass[3] = i2c_read();
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002D 	mass[4] = i2c_read();
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002E 	mass[5] = i2c_read();
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002F 	i2c_stop();
;PCODE: $00000023 VOL: 0
; 0000 0030 
; 0000 0031 	for (a = 0; a < 3; a++)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0032 	{
; 0000 0033 		imass[a] = (mass[a]<<8) + mass[(a*2)];
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0034 	}
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0035 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;
;void main(void)
; 0000 0039 {
;PCODE: $0000004C VOL: 0
; 0000 003A // Declare your local variables here
; 0000 003B 
; 0000 003C // Crystal Oscillator division factor: 1
; 0000 003D #pragma optsize-
; 0000 003E CLKPR=0x80;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003F CLKPR=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0040 #ifdef _OPTIMIZE_SIZE_
; 0000 0041 #pragma optsize+
; 0000 0042 #endif
; 0000 0043 
; 0000 0044 // Input/Output Ports initialization
; 0000 0045 // Port A initialization
; 0000 0046 // Func2=In Func1=In Func0=In
; 0000 0047 // State2=T State1=T State0=T
; 0000 0048 PORTA=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0049 DDRA=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004A 
; 0000 004B // Port B initialization
; 0000 004C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004E PORTB=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 004F DDRB=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0050 
; 0000 0051 // Port D initialization
; 0000 0052 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0053 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0054 PORTD=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0055 DDRD=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0056 
; 0000 0057 // Timer/Counter 0 initialization
; 0000 0058 // Clock source: System Clock
; 0000 0059 // Clock value: Timer 0 Stopped
; 0000 005A // Mode: Normal top=0xFF
; 0000 005B // OC0A output: Disconnected
; 0000 005C // OC0B output: Disconnected
; 0000 005D TCCR0A=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 005E TCCR0B=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 005F TCNT0=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0060 OCR0A=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0061 OCR0B=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0062 
; 0000 0063 // Timer/Counter 1 initialization
; 0000 0064 // Clock source: System Clock
; 0000 0065 // Clock value: Timer1 Stopped
; 0000 0066 // Mode: Normal top=0xFFFF
; 0000 0067 // OC1A output: Discon.
; 0000 0068 // OC1B output: Discon.
; 0000 0069 // Noise Canceler: Off
; 0000 006A // Input Capture on Falling Edge
; 0000 006B // Timer1 Overflow Interrupt: Off
; 0000 006C // Input Capture Interrupt: Off
; 0000 006D // Compare A Match Interrupt: Off
; 0000 006E // Compare B Match Interrupt: Off
; 0000 006F TCCR1A=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0070 TCCR1B=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0071 TCNT1H=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0072 TCNT1L=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0073 ICR1H=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0074 ICR1L=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0075 OCR1AH=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0076 OCR1AL=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0077 OCR1BH=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0078 OCR1BL=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0079 
; 0000 007A // External Interrupt(s) initialization
; 0000 007B // INT0: Off
; 0000 007C // INT1: Off
; 0000 007D // Interrupt on any change on pins PCINT0-7: Off
; 0000 007E GIMSK=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 007F MCUCR=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0080 
; 0000 0081 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0082 TIMSK=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0083 
; 0000 0084 // Universal Serial Interface initialization
; 0000 0085 // Mode: Disabled
; 0000 0086 // Clock source: Register & Counter=no clk.
; 0000 0087 // USI Counter Overflow Interrupt: Off
; 0000 0088 USICR=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0089 
; 0000 008A // USART initialization
; 0000 008B // USART disabled
; 0000 008C UCSRB=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 008D 
; 0000 008E // Analog Comparator initialization
; 0000 008F // Analog Comparator: Off
; 0000 0090 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0091 ACSR=0x80;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0092 DIDR=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0093 
; 0000 0094 // I2C Bus initialization
; 0000 0095 // I2C Port: PORTB
; 0000 0096 // I2C SDA bit: 1
; 0000 0097 // I2C SCL bit: 0
; 0000 0098 // Bit Rate: 100 kHz
; 0000 0099 // Note: I2C settings are specified in the
; 0000 009A // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 009B i2c_init();
;PCODE: $00000089 VOL: 0
; 0000 009C 
; 0000 009D while (1)
;PCODE: $0000008A VOL: 0
; 0000 009E       {
; 0000 009F 
; 0000 00A0       }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A1 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
